//============================================================================//
// Define params
//============================================================================//

// Input and output
params.out_dir = "output"
params.reads = "raw_data/*fastq"

// Specify workflow
params.assembly_pipeline = "T"
params.reads_pipeline = "F"

// Specify where the conda environment will be saved
params.conda_env_location = "/home/jn151/virtual_environments"

// SPAdes
params.spades_type = "meta"
params.temp_dir = "temp"
params.spades_min_length = 300

// DIAMOND
params.diamond_database = "/n/data2/dfci/medonc/decaprio/jason/\
genomes_indexes_references_databases/diamond_databases/viral_2019-02-03.dmnd"
params.diamond_evalue = "10"
params.diamond_outfmt = "6 qseqid stitle sseqid staxids evalue bitscore pident length"

// BLAST
params.blast_database = "/n/data2/dfci/medonc/decaprio/jason/\
genomes_indexes_references_databases/blastn_databases/nt_v5/nt_v5"
params.blast_evalue = 10
params.blast_type = 'megablast'
params.blast_outfmt = "6 qseqid stitle sseqid staxid evalue bitscore pident length"
params.blast_log_file = "blast.log"
params.blast_max_hsphs = 1
params.blast_max_targets = 30
params.blast_ignore_taxids = "no"
params.blast_restrict_to_taxids = "493803" //merkel

// BLAST/DIAMOND Conversion
params.LCA_top_percent = 1
params.within_percent_of_top_score = 1
params.taxid_blacklist = "$VID/resources/2019-08-09_blacklist.tsv"
params.diamond_readable_colnames = "query_ID seq_title seq_ID taxonID evalue bitscore pident length"
params.blast_readable_colnames = "query_ID seq_title seq_ID taxonID evalue bitscore pident length"
params.taxonomy_column = "taxonID"
params.score_column = "bitscore"

// Contaminant blast search
params.blast_contaminant_database = "/n/data2/dfci/medonc/decaprio/jason/\
genomes_indexes_references_databases/blastn_databases/vector/vector"
params.blast_contaminant_evalue = 0.001
params.blast_contaminant_outfmt = "6 qseqid stitle sseqid staxid evalue bitscore pident length"
params.blast_contaminant_log_file = "blast_contaminant.log"
params.blast_contaminant_type = "megablast"
params.blast_contaminant_max_hsphs = 1
params.blast_contaminant_max_targets = 1

//============================================================================//
// Assign resources
//============================================================================//

process {

  // Global settings
  executor = 'slurm'
  queue = 'short'
  cache = 'lenient'
  conda = "$baseDir/resources/virID_environment.yml"

  // Error handling
  errorStrategy = 'retry'
  maxRetries = 3

  withName: process_read_pairs {
    time = '1m'
    memory = "2 GB"
    cpus = 1
  }

  withName: spades_assembly {
    time = '5m'
    memory = "5 GB"
    cpus = 1
  }

  withName: diamond {
    time = '10m'
    memory = "5 GB"
    cpus = 1
  }

  withName: convert_diamond {
    time = '5m'
    memory = "1 GB"
    cpus = 1
  }

  withName: blast {
    time = '1m'
    memory = "20 GB"
    cpus = 1
  }

  withName: convert_blast {
    time = '5m'
    memory = "1 GB"
    cpus = 1
  }

  withName: bwa_mem_contigs {
    time = '5m'
    memory = "1 GB"
    cpus = 2
  }

  withName: blast_contaminant {
    time = { 8.m * task.attempt }
    memory = { 2.GB * task.attempt }
    cpus = 2
  }

  withName: generate_output {
    time = '5m'
    memory = "1 GB"
    cpus = 1
  }

}

executor {
  // Let nextflow submit up to this many jobs in parallel at one time
  queueSize = 5000
}

report {
  enabled = true
  file = "$params.out_dir/reports/pipeline_report.html"
}

timeline {
  enabled = true
  file = "$params.out_dir/reports/timeline.html"
}

trace {
  enabled = true
  file = "$params.out_dir/reports/trace.tsv"
}

conda {
  // Where to save the conda environment so it doesn't need to be re-generated.
  cacheDir = "$params.conda_env_location"
}

// Require a nextflow version
if( !nextflow.version.matches('19.10+') ) {
    println "This workflow requires Nextflow version 19.10 or greater -- You are running version $nextflow.version"
    exit 1
}
